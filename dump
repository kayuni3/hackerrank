--a good example that you don't have to pull columns just from tables
--in a way query creates a table and so we can pull from there
select m.hacker_id, h.name, sum(score) as total_score from
(select hacker_id, challenge_id, max(score) as score
from Submissions group by hacker_id, challenge_id) as m
join Hackers as h
on m.hacker_id = h.hacker_id
group by m.hacker_id, h.name
having total_score > 0
order by total_score desc, m.hacker_id;
--having is used instead of where when you use aggregate functions like sum and max here we used greater than 0, sum, and max
--link to more info https://www.sqltutorial.org/sql-having/

-------------------------------

--concat combines multiple expressions into one "row"
--left can also be used for substring
select concat(name, '(', substring(occupation, 1, 1), ')') as name
from occupations
order by name
select concat('There are a total of', ' ', count(occupation), ' ', 
lower(occupation), 's.') as profession
from occupations
group by occupation
order by profession;

------------------------------------

-creates a table using MySql what we add in the initial select line becomes are new columns 
select Doctor, Professor, Singer, Actor 
from 
--assigns the new columns titles to the values from the original table
--not sure why max is used
--NameOrder is row criteria and then the case when then statements make the columns 
(select NameOrder, 
max(case occupation when 'Doctor' then name end) as Doctor,
max(case occupation when 'Professor' then name end) as Professor,
max(case occupation when 'Singer' then name end) as Singer,
max(case occupation when 'Actor' then name end) as Actor
--alphabetizes the names using the row_number() function, it "makes a table"/query and then pulls the occupation values from this alphabetical "table" called Names instead
--it assigns each name a row based on this alphabetical order and seperates them based on occupation with the partition by clause
--so basically doctor will be sorted in the first lets say 5 rows and then singer will be sorted in the next 6 
from 
(select occupation, name, row_number() over(partition by Occupation order by name asc) as NameOrder 
from Occupations) as NameLists 
group by NameOrder) 
as Names
--row_number() assign a sequential number to each row in the result set
--partition by breaks the rows into smaller sets similar to group by, order by orders the rows 
-- a link to more info for pivot tables using MySql https://www.dbrnd.com/2015/08/arrange-rows-to-columns-pivot-table-in-mysql/
--link to more info for row_number() function https://www.mysqltutorial.org/mysql-window-functions/mysql-row_number-function/

--------------------------------------

--Binary Tree
select n,
case 
when p is null then 'Root'
when n in (select p from BST) then 'Inner'
else 'Leaf'
end as "P"
from BST
order by n;
--a node would be an inner if it's parent's value is not null (it's parent has a parent)

-----------------------------------------

--uses the union function to remove dupicates and exists and I haven't used these before
--I honestly do not understand this at all because the question is kinda confusing
select a.x, a.y 
from functions as a
where a.x = a.y and (
    select count(*) 
    from functions 
    where x = a.x and y = a.y) > 1 
 --reads as find a.x and a.y values where a.x and a.y are equal and there is more than one that match their values. 
 --this I believe is what finds the pair
    
union  
  
select a.x, a.y
from functions as a
where exists (
    select x, y
    from functions 
    where a.x = y and a.y = x and a.x < x) 
order by x;
--the a.x < x makes sense because x1 has to be less than and equal to y1 and if y1 is equal to x2 then x1 should be less than x2
--I think using union makes this cleaner and easier, basically one query finds the pairs and then other finds the x<y values

-----------------------------------------

select a.contest_id, a.hacker_id, a.name, sum(e.total_submissions), sum(e.total_accepted_submissions), sum(g.total_views) , sum(g.total_unique_views) 
from contests as a
join colleges as b 
on a.contest_id = b.contest_id
join challenges as c
on b.college_id = c.college_id

--returns the results from the above table^^ and any matches from the one below
--differs from inner join because it will return values for the left table even if there are no matches in the right table 
LEFT JOIN
(SELECT d.challenge_id, SUM(d.total_submissions) AS total_submissions, SUM(d.total_accepted_submissions) AS total_accepted_submissions 
FROM Submission_Stats AS d 
GROUP BY d.challenge_id) AS e
ON c.challenge_id = e.challenge_id
--group by is used bc the table has challenge id that repeat for example data couldve been constantly added as new entries at each stop
--I'm thinking we're using left join because some contests/challenges may not have submissions or views but we still want to add it to our table

LEFT JOIN
(SELECT f.challenge_id, SUM(f.total_views) AS total_views, SUM(total_unique_views) AS total_unique_views 
FROM View_Stats AS f
GROUP BY f.challenge_id) AS g
ON c.challenge_id = g.challenge_id
GROUP BY a.contest_id, a.hacker_id, a.name

--if the sum of all four is greater than 0 then we know that all four sums are not zero
HAVING SUM(e.total_submissions)+
       SUM(e.total_accepted_submissions)+
       SUM(g.total_views)+
       SUM(g.total_unique_views) > 0
order by a.contest_id;
-- inner join vs left/right join https://www.sqlshack.com/learn-sql-inner-join-vs-left-join/
--challenge link https://www.hackerrank.com/challenges/interviews/problem?isFullScreen=true&h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen

--this challenge uses group_concat function link: https://www.hackerrank.com/challenges/print-prime-numbers/problem?isFullScreen=true
--group_concat explained https://www.mysqltutorial.org/mysql-group_concat/
--used group concat because result should be a single line 
SELECT GROUP_CONCAT(
NUMB 
SEPARATOR '&')
FROM (
    SELECT @num:=@num+1 as NUMB 
    --declares a variable num as numb 
    FROM
    information_schema.tables t1,
    information_schema.tables t2,
    (SELECT @num:=1) tmp
) tempNum
--from a table of nums 1-1000 named tempNum
--information_schema.tables is used as a "dummy" table since this example doesn't have one listed since for any sql query you need a table
WHERE NUMB<=1000 AND NOT EXISTS(
        SELECT * FROM (
            SELECT @nu:=@nu+1 as NUMA
            --declares a variable nu
            FROM
                information_schema.tables t1,
                information_schema.tables t2,
                (SELECT @nu:=1) tmp1
                LIMIT 1000
            ) tatata
        WHERE FLOOR(NUMB/NUMA)=(NUMB/NUMA) AND NUMA<NUMB AND NUMA>1
        --floor returns the largest integer value that is <= to a number
    )
--info about info schema https://www.hackerrank.com/challenges/draw-the-triangle-1/forum/comments/210662
--here we used two table since we need 1000 entries 
